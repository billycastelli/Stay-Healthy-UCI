{"version":3,"sources":["useFocusEffect.tsx"],"names":["useFocusEffect","callback","navigation","React","useEffect","isFocused","cleanup","unsubscribeFocus","addListener","undefined","unsubscribeBlur"],"mappings":";;;;;;;AAAA;;AACA;;;;;;;;AAIA;;;;;;;AAOe,SAASA,cAAT,CAAwBC,QAAxB,EAAkD;AAC/D,QAAMC,UAAU,GAAG,6BAAnB;AAEAC,EAAAA,KAAK,CAACC,SAAN,CAAgB,MAAM;AACpB,QAAIC,SAAS,GAAG,KAAhB;AACA,QAAIC,OAAJ,CAFoB,CAIpB;;AACA,QAAIJ,UAAU,CAACG,SAAX,EAAJ,EAA4B;AAC1BC,MAAAA,OAAO,GAAGL,QAAQ,EAAlB;AACAI,MAAAA,SAAS,GAAG,IAAZ;AACD;;AAED,UAAME,gBAAgB,GAAGL,UAAU,CAACM,WAAX,CAAuB,OAAvB,EAAgC,MAAM;AAC7D;AACA;AACA,UAAIH,SAAJ,EAAe;AACb;AACD;;AAED,UAAIC,OAAO,KAAKG,SAAhB,EAA2B;AACzBH,QAAAA,OAAO;AACR;;AAEDA,MAAAA,OAAO,GAAGL,QAAQ,EAAlB;AACAI,MAAAA,SAAS,GAAG,IAAZ;AACD,KAbwB,CAAzB;AAeA,UAAMK,eAAe,GAAGR,UAAU,CAACM,WAAX,CAAuB,MAAvB,EAA+B,MAAM;AAC3D,UAAIF,OAAO,KAAKG,SAAhB,EAA2B;AACzBH,QAAAA,OAAO;AACR;;AAEDA,MAAAA,OAAO,GAAGG,SAAV;AACAJ,MAAAA,SAAS,GAAG,KAAZ;AACD,KAPuB,CAAxB;AASA,WAAO,MAAM;AACX,UAAIC,OAAO,KAAKG,SAAhB,EAA2B;AACzBH,QAAAA,OAAO;AACR;;AAEDC,MAAAA,gBAAgB;AAChBG,MAAAA,eAAe;AAChB,KAPD;AAQD,GA1CD,EA0CG,CAACT,QAAD,EAAWC,UAAX,CA1CH;AA2CD","sourcesContent":["import * as React from 'react';\nimport useNavigation from './useNavigation';\n\ntype EffectCallback = () => undefined | void | (() => void);\n\n/**\n * Hook to run an effect in a focused screen, similar to `React.useEffect`.\n * This can be used to perform side-effects such as fetching data or subscribing to events.\n * The passed callback should be wrapped in `React.useCallback` to avoid running the effect too often.\n *\n * @param callback Memoized callback containing the effect, should optionally return a cleanup function.\n */\nexport default function useFocusEffect(callback: EffectCallback) {\n  const navigation = useNavigation();\n\n  React.useEffect(() => {\n    let isFocused = false;\n    let cleanup: undefined | void | (() => void);\n\n    // We need to run the effect on intial render/dep changes if the screen is focused\n    if (navigation.isFocused()) {\n      cleanup = callback();\n      isFocused = true;\n    }\n\n    const unsubscribeFocus = navigation.addListener('focus', () => {\n      // If callback was already called for focus, avoid calling it again\n      // The focus event may also fire on intial render, so we guard against runing the effect twice\n      if (isFocused) {\n        return;\n      }\n\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      cleanup = callback();\n      isFocused = true;\n    });\n\n    const unsubscribeBlur = navigation.addListener('blur', () => {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      cleanup = undefined;\n      isFocused = false;\n    });\n\n    return () => {\n      if (cleanup !== undefined) {\n        cleanup();\n      }\n\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [callback, navigation]);\n}\n"]}