{"version":3,"sources":["SceneView.tsx"],"names":["SceneView","screen","route","navigation","getState","setState","performTransaction","React","useContext","NavigationStateContext","navigatorKeyRef","useRef","getKey","useCallback","current","setKey","key","getCurrentState","state","currentRoute","routes","find","r","undefined","setCurrentState","child","map","context","useMemo","name","component","children"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Route,\n  ParamListBase,\n  NavigationState,\n  PartialState,\n} from '@react-navigation/routers';\nimport { NavigationStateContext } from './BaseNavigationContainer';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport StaticContainer from './StaticContainer';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport { NavigationProp, RouteConfig } from './types';\n\ntype Props<State extends NavigationState, ScreenOptions extends object> = {\n  screen: RouteConfig<ParamListBase, string, ScreenOptions>;\n  navigation: NavigationProp<ParamListBase, string, State, ScreenOptions>;\n  route: Route<string> & {\n    state?: NavigationState | PartialState<NavigationState>;\n  };\n  getState: () => State;\n  setState: (state: State) => void;\n};\n\n/**\n * Component which takes care of rendering the screen for a route.\n * It provides all required contexts and applies optimizations when applicable.\n */\nexport default function SceneView<\n  State extends NavigationState,\n  ScreenOptions extends object\n>({\n  screen,\n  route,\n  navigation,\n  getState,\n  setState,\n}: Props<State, ScreenOptions>) {\n  const { performTransaction } = React.useContext(NavigationStateContext);\n\n  const navigatorKeyRef = React.useRef<string | undefined>();\n\n  const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n  const setKey = React.useCallback((key: string) => {\n    navigatorKeyRef.current = key;\n  }, []);\n\n  const getCurrentState = React.useCallback(() => {\n    const state = getState();\n    const currentRoute = state.routes.find(r => r.key === route.key);\n\n    return currentRoute ? currentRoute.state : undefined;\n  }, [getState, route.key]);\n\n  const setCurrentState = React.useCallback(\n    (child: NavigationState | PartialState<NavigationState> | undefined) => {\n      const state = getState();\n\n      setState({\n        ...state,\n        routes: state.routes.map(r =>\n          r.key === route.key ? { ...r, state: child } : r\n        ),\n      });\n    },\n    [getState, route.key, setState]\n  );\n\n  const context = React.useMemo(\n    () => ({\n      state: route.state,\n      getState: getCurrentState,\n      setState: setCurrentState,\n      performTransaction,\n      getKey,\n      setKey,\n    }),\n    [\n      getCurrentState,\n      getKey,\n      performTransaction,\n      route.state,\n      setCurrentState,\n      setKey,\n    ]\n  );\n\n  return (\n    <NavigationContext.Provider value={navigation}>\n      <NavigationRouteContext.Provider value={route}>\n        <NavigationStateContext.Provider value={context}>\n          <EnsureSingleNavigator>\n            <StaticContainer\n              name={screen.name}\n              // @ts-ignore\n              render={screen.component || screen.children}\n              navigation={navigation}\n              route={route}\n            >\n              {'component' in screen && screen.component !== undefined ? (\n                // @ts-ignore\n                <screen.component navigation={navigation} route={route} />\n              ) : 'children' in screen && screen.children !== undefined ? (\n                // @ts-ignore\n                screen.children({ navigation, route })\n              ) : null}\n            </StaticContainer>\n          </EnsureSingleNavigator>\n        </NavigationStateContext.Provider>\n      </NavigationRouteContext.Provider>\n    </NavigationContext.Provider>\n  );\n}\n"]}