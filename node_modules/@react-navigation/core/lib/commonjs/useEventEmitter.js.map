{"version":3,"sources":["useEventEmitter.tsx"],"names":["useEventEmitter","listeners","React","useRef","create","useCallback","target","removeListener","type","callback","callbacks","current","undefined","index","indexOf","splice","addListener","push","emit","data","canPreventDefault","items","slice","concat","Object","keys","map","t","event","defineProperty","get","defaultPrevented","defineProperties","preventDefault","value","forEach","cb","useMemo"],"mappings":";;;;;;;AAAA;;;;;;AASA;;;AAGe,SAASA,eAAT,GAAmD;AAChE,QAAMC,SAAS,GAAGC,KAAK,CAACC,MAAN,CAAwD,EAAxD,CAAlB;AAEA,QAAMC,MAAM,GAAGF,KAAK,CAACG,WAAN,CAAmBC,MAAD,IAAoB;AACnD,UAAMC,cAAc,GAAG,CAACC,IAAD,EAAeC,QAAf,KAAiD;AACtE,YAAMC,SAAS,GAAGT,SAAS,CAACU,OAAV,CAAkBH,IAAlB,IACdP,SAAS,CAACU,OAAV,CAAkBH,IAAlB,EAAwBF,MAAxB,CADc,GAEdM,SAFJ;;AAIA,UAAI,CAACF,SAAL,EAAgB;AACd;AACD;;AAED,YAAMG,KAAK,GAAGH,SAAS,CAACI,OAAV,CAAkBL,QAAlB,CAAd;AAEAC,MAAAA,SAAS,CAACK,MAAV,CAAiBF,KAAjB,EAAwB,CAAxB;AACD,KAZD;;AAcA,UAAMG,WAAW,GAAG,CAACR,IAAD,EAAeC,QAAf,KAAiD;AACnER,MAAAA,SAAS,CAACU,OAAV,CAAkBH,IAAlB,IAA0BP,SAAS,CAACU,OAAV,CAAkBH,IAAlB,KAA2B,EAArD;AACAP,MAAAA,SAAS,CAACU,OAAV,CAAkBH,IAAlB,EAAwBF,MAAxB,IAAkCL,SAAS,CAACU,OAAV,CAAkBH,IAAlB,EAAwBF,MAAxB,KAAmC,EAArE;AACAL,MAAAA,SAAS,CAACU,OAAV,CAAkBH,IAAlB,EAAwBF,MAAxB,EAAgCW,IAAhC,CAAqCR,QAArC;AAEA,aAAO,MAAMF,cAAc,CAACC,IAAD,EAAOC,QAAP,CAA3B;AACD,KAND;;AAQA,WAAO;AACLO,MAAAA,WADK;AAELT,MAAAA;AAFK,KAAP;AAID,GA3Bc,EA2BZ,EA3BY,CAAf;AA6BA,QAAMW,IAAI,GAAGhB,KAAK,CAACG,WAAN,CACX,UAUM;AAAA,QAVL;AACCG,MAAAA,IADD;AAECW,MAAAA,IAFD;AAGCb,MAAAA,MAHD;AAICc,MAAAA;AAJD,KAUK;AACJ,UAAMC,KAAK,GAAGpB,SAAS,CAACU,OAAV,CAAkBH,IAAlB,KAA2B,EAAzC,CADI,CAGJ;;AACA,UAAME,SAAS,GACbJ,MAAM,KAAKM,SAAX,GACIS,KAAK,CAACf,MAAD,CAAL,IAAiBe,KAAK,CAACf,MAAD,CAAL,CAAcgB,KAAd,EADrB,GAEK,EAAD,CAAkBC,MAAlB,CAAyB,GAAGC,MAAM,CAACC,IAAP,CAAYJ,KAAZ,EAAmBK,GAAnB,CAAuBC,CAAC,IAAIN,KAAK,CAACM,CAAD,CAAjC,CAA5B,CAHN;AAKA,UAAMC,KAA8B,GAAG;AACrC,UAAIpB,IAAJ,GAAW;AACT,eAAOA,IAAP;AACD;;AAHoC,KAAvC;;AAMA,QAAIW,IAAI,KAAKP,SAAb,EAAwB;AACtBY,MAAAA,MAAM,CAACK,cAAP,CAAsBD,KAAtB,EAA6B,MAA7B,EAAqC;AACnCE,QAAAA,GAAG,GAAG;AACJ,iBAAOX,IAAP;AACD;;AAHkC,OAArC;AAKD;;AAED,QAAIC,iBAAJ,EAAuB;AACrB,UAAIW,gBAAgB,GAAG,KAAvB;AAEAP,MAAAA,MAAM,CAACQ,gBAAP,CAAwBJ,KAAxB,EAA+B;AAC7BG,QAAAA,gBAAgB,EAAE;AAChBD,UAAAA,GAAG,GAAG;AACJ,mBAAOC,gBAAP;AACD;;AAHe,SADW;AAM7BE,QAAAA,cAAc,EAAE;AACdC,UAAAA,KAAK,GAAG;AACNH,YAAAA,gBAAgB,GAAG,IAAnB;AACD;;AAHa;AANa,OAA/B;AAYD;;AAEDrB,IAAAA,SAAS,SAAT,IAAAA,SAAS,WAAT,YAAAA,SAAS,CAAEyB,OAAX,CAAmBC,EAAE,IAAIA,EAAE,CAACR,KAAD,CAA3B;AAEA,WAAOA,KAAP;AACD,GAtDU,EAuDX,EAvDW,CAAb;AA0DA,SAAO1B,KAAK,CAACmC,OAAN,CAAc,OAAO;AAAEjC,IAAAA,MAAF;AAAUc,IAAAA;AAAV,GAAP,CAAd,EAAwC,CAACd,MAAD,EAASc,IAAT,CAAxC,CAAP;AACD","sourcesContent":["import * as React from 'react';\nimport { EventEmitter, EventConsumer, EventArg } from './types';\n\nexport type NavigationEventEmitter = EventEmitter<Record<string, any>> & {\n  create: (target: string) => EventConsumer<Record<string, any>>;\n};\n\ntype Listeners = ((data: any) => void)[];\n\n/**\n * Hook to manage the event system used by the navigator to notify screens of various events.\n */\nexport default function useEventEmitter(): NavigationEventEmitter {\n  const listeners = React.useRef<Record<string, Record<string, Listeners>>>({});\n\n  const create = React.useCallback((target: string) => {\n    const removeListener = (type: string, callback: (data: any) => void) => {\n      const callbacks = listeners.current[type]\n        ? listeners.current[type][target]\n        : undefined;\n\n      if (!callbacks) {\n        return;\n      }\n\n      const index = callbacks.indexOf(callback);\n\n      callbacks.splice(index, 1);\n    };\n\n    const addListener = (type: string, callback: (data: any) => void) => {\n      listeners.current[type] = listeners.current[type] || {};\n      listeners.current[type][target] = listeners.current[type][target] || [];\n      listeners.current[type][target].push(callback);\n\n      return () => removeListener(type, callback);\n    };\n\n    return {\n      addListener,\n      removeListener,\n    };\n  }, []);\n\n  const emit = React.useCallback(\n    ({\n      type,\n      data,\n      target,\n      canPreventDefault,\n    }: {\n      type: string;\n      data?: any;\n      target?: string;\n      canPreventDefault?: boolean;\n    }) => {\n      const items = listeners.current[type] || {};\n\n      // Copy the current list of callbacks in case they are mutated during execution\n      const callbacks =\n        target !== undefined\n          ? items[target] && items[target].slice()\n          : ([] as Listeners).concat(...Object.keys(items).map(t => items[t]));\n\n      const event: EventArg<any, any, any> = {\n        get type() {\n          return type;\n        },\n      };\n\n      if (data !== undefined) {\n        Object.defineProperty(event, 'data', {\n          get() {\n            return data;\n          },\n        });\n      }\n\n      if (canPreventDefault) {\n        let defaultPrevented = false;\n\n        Object.defineProperties(event, {\n          defaultPrevented: {\n            get() {\n              return defaultPrevented;\n            },\n          },\n          preventDefault: {\n            value() {\n              defaultPrevented = true;\n            },\n          },\n        });\n      }\n\n      callbacks?.forEach(cb => cb(event));\n\n      return event as any;\n    },\n    []\n  );\n\n  return React.useMemo(() => ({ create, emit }), [create, emit]);\n}\n"]}