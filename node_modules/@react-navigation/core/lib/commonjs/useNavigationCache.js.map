{"version":3,"sources":["useNavigationCache.tsx"],"names":["useNavigationCache","state","getState","navigation","setOptions","router","emitter","parentNavigation","React","useContext","NavigationContext","cache","useMemo","current","actions","actionCreators","CommonActions","routes","reduce","acc","route","index","previous","key","emit","rest","dispatch","action","payload","source","helpers","Object","keys","name","create","dangerouslyGetParent","dangerouslyGetState","options","o","isFocused"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  CommonActions,\n  NavigationAction,\n  ParamListBase,\n  NavigationState,\n  Router,\n} from '@react-navigation/routers';\nimport { NavigationEventEmitter } from './useEventEmitter';\nimport NavigationContext from './NavigationContext';\n\nimport { NavigationHelpers, NavigationProp } from './types';\n\ntype Options<State extends NavigationState> = {\n  state: State;\n  getState: () => State;\n  navigation: NavigationHelpers<ParamListBase> &\n    Partial<NavigationProp<ParamListBase, string, any, any, any>>;\n  setOptions: (\n    cb: (options: Record<string, object>) => Record<string, object>\n  ) => void;\n  router: Router<State, NavigationAction>;\n  emitter: NavigationEventEmitter;\n};\n\ntype NavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends object\n> = {\n  [key: string]: NavigationProp<ParamListBase, string, State, ScreenOptions>;\n};\n\n/**\n * Hook to cache navigation objects for each screen in the navigator.\n * It's important to cache them to make sure navigation objects don't change between renders.\n * This lets us apply optimizations like `React.memo` to minimize re-rendering screens.\n */\nexport default function useNavigationCache<\n  State extends NavigationState,\n  ScreenOptions extends object\n>({\n  state,\n  getState,\n  navigation,\n  setOptions,\n  router,\n  emitter,\n}: Options<State>) {\n  // Cache object which holds navigation objects for each screen\n  // We use `React.useMemo` instead of `React.useRef` coz we want to invalidate it when deps change\n  // In reality, these deps will rarely change, if ever\n  const parentNavigation = React.useContext(NavigationContext);\n\n  const cache = React.useMemo(\n    () => ({ current: {} as NavigationCache<State, ScreenOptions> }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [getState, navigation, setOptions, router, emitter, parentNavigation]\n  );\n\n  const actions = {\n    ...router.actionCreators,\n    ...CommonActions,\n  };\n\n  cache.current = state.routes.reduce<NavigationCache<State, ScreenOptions>>(\n    (acc, route, index) => {\n      const previous = cache.current[route.key];\n\n      if (previous) {\n        // If a cached navigation object already exists, reuse it\n        acc[route.key] = previous;\n      } else {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { emit, ...rest } = navigation;\n\n        const dispatch = (\n          action: NavigationAction | ((state: State) => NavigationAction)\n        ) => {\n          const payload =\n            typeof action === 'function' ? action(getState()) : action;\n\n          navigation.dispatch(\n            typeof payload === 'object' && payload != null\n              ? { source: route.key, ...payload }\n              : payload\n          );\n        };\n\n        const helpers = Object.keys(actions).reduce<Record<string, () => void>>(\n          (acc, name) => {\n            // @ts-ignore\n            acc[name] = (...args: any) => dispatch(actions[name](...args));\n            return acc;\n          },\n          {}\n        );\n\n        acc[route.key] = {\n          ...rest,\n          ...helpers,\n          ...emitter.create(route.key),\n          dangerouslyGetParent: () => parentNavigation as any,\n          dangerouslyGetState: getState,\n          dispatch,\n          setOptions: (options: object) =>\n            setOptions(o => ({\n              ...o,\n              [route.key]: { ...o[route.key], ...options },\n            })),\n          isFocused: () => {\n            const state = getState();\n\n            if (index !== state.index) {\n              return false;\n            }\n\n            // If the current screen is focused, we also need to check if parent navigator is focused\n            // This makes sure that we return the focus state in the whole tree, not just this navigator\n            return navigation ? navigation.isFocused() : true;\n          },\n        };\n      }\n\n      return acc;\n    },\n    {}\n  );\n\n  return cache.current;\n}\n"]}