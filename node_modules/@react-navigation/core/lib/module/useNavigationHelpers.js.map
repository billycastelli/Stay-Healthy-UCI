{"version":3,"sources":["useNavigationHelpers.tsx"],"names":["React","CommonActions","NavigationContext","NavigationStateContext","PrivateValueStore","useNavigationHelpers","onAction","getState","emitter","router","parentNavigationHelpers","useContext","performTransaction","useMemo","dispatch","action","payload","handled","process","env","NODE_ENV","console","error","type","JSON","stringify","actions","actionCreators","helpers","Object","keys","reduce","acc","name","emit","isFocused","canGoBack","state","getStateForAction","goBack","routeNames","routeParamList"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SACEC,aADF,QAMO,2BANP;AAOA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,SAASC,sBAAT,QAAuC,2BAAvC;AAEA,SAA4CC,iBAA5C,QAAqE,SAArE,C,CAEA;AACA;;AACAA,iBAAiB;;AAYjB;;;;AAIA,eAAe,SAASC,oBAAT,OAIoD;AAAA,MAAjE;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsBC,IAAAA,OAAtB;AAA+BC,IAAAA;AAA/B,GAAiE;AACjE,QAAMC,uBAAuB,GAAGV,KAAK,CAACW,UAAN,CAAiBT,iBAAjB,CAAhC;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAyBZ,KAAK,CAACW,UAAN,CAAiBR,sBAAjB,CAA/B;AAEA,SAAOH,KAAK,CAACa,OAAN,CAAc,MAAM;AACzB,UAAMC,QAAQ,GAAIC,MAAD,IAAiD;AAChEH,MAAAA,kBAAkB,CAAC,MAAM;AACvB,cAAMI,OAAO,GACX,OAAOD,MAAP,KAAkB,UAAlB,GAA+BA,MAAM,CAACR,QAAQ,EAAT,CAArC,GAAoDQ,MADtD;AAGA,cAAME,OAAO,GAAGX,QAAQ,CAACU,OAAD,CAAxB;;AAEA,YAAI,CAACC,OAAD,IAAYC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzC,EAAuD;AACrDC,UAAAA,OAAO,CAACC,KAAR,uBACiBN,OAAO,CAACO,IADzB,6BACgDC,IAAI,CAACC,SAAL,CAC5CT,OAAO,CAACA,OADoC,CADhD;AAKD;AACF,OAbiB,CAAlB;AAcD,KAfD;;AAiBA,UAAMU,OAAO,qBACRjB,MAAM,CAACkB,cADC,MAER1B,aAFQ,CAAb;;AAKA,UAAM2B,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAYJ,OAAZ,EAAqBK,MAArB,CACd,CAACC,GAAD,EAAMC,IAAN,KAAe;AACb;AACAD,MAAAA,GAAG,CAACC,IAAD,CAAH,GAAY;AAAA,eAAkBnB,QAAQ,CAACY,OAAO,CAACO,IAAD,CAAP,CAAc,YAAd,CAAD,CAA1B;AAAA,OAAZ;;AACA,aAAOD,GAAP;AACD,KALa,EAMd,EANc,CAAhB;AASA,6BACKtB,uBADL,MAEKkB,OAFL;AAGEd,MAAAA,QAHF;AAIEoB,MAAAA,IAAI,EAAE1B,OAAO,CAAC0B,IAJhB;AAKEC,MAAAA,SAAS,EAAEzB,uBAAuB,GAC9BA,uBAAuB,CAACyB,SADM,GAE9B,MAAM,IAPZ;AAQEC,MAAAA,SAAS,EAAE,MAAM;AACf,cAAMC,KAAK,GAAG9B,QAAQ,EAAtB;AAEA,eACEE,MAAM,CAAC6B,iBAAP,CAAyBD,KAAzB,EAAgCpC,aAAa,CAACsC,MAAd,EAAhC,EAAkE;AAChEC,UAAAA,UAAU,EAAEH,KAAK,CAACG,UAD8C;AAEhEC,UAAAA,cAAc,EAAE;AAFgD,SAAlE,MAGO,IAHP,KAIA/B,uBAJA,aAIAA,uBAJA,uBAIAA,uBAAuB,CAAE0B,SAAzB,EAJA,KAKA,KANF;AAQD;AAnBH;AAsBD,GAtDM,EAsDJ,CACD3B,MADC,EAEDF,QAFC,EAGDG,uBAHC,EAIDF,OAAO,CAAC0B,IAJP,EAKDtB,kBALC,EAMDN,QANC,CAtDI,CAAP;AA8DD","sourcesContent":["import * as React from 'react';\nimport {\n  CommonActions,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  Router,\n} from '@react-navigation/routers';\nimport NavigationContext from './NavigationContext';\nimport { NavigationStateContext } from './BaseNavigationContainer';\nimport { NavigationEventEmitter } from './useEventEmitter';\nimport { NavigationHelpers, NavigationProp, PrivateValueStore } from './types';\n\n// This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\nPrivateValueStore;\n\ntype Options<State extends NavigationState, Action extends NavigationAction> = {\n  onAction: (\n    action: NavigationAction,\n    visitedNavigators?: Set<string>\n  ) => boolean;\n  getState: () => State;\n  emitter: NavigationEventEmitter;\n  router: Router<State, Action>;\n};\n\n/**\n * Navigation object with helper methods to be used by a navigator.\n * This object includes methods for common actions as well as methods the parent screen's navigation object.\n */\nexport default function useNavigationHelpers<\n  State extends NavigationState,\n  Action extends NavigationAction,\n  EventMap extends Record<string, any>\n>({ onAction, getState, emitter, router }: Options<State, Action>) {\n  const parentNavigationHelpers = React.useContext(NavigationContext);\n  const { performTransaction } = React.useContext(NavigationStateContext);\n\n  return React.useMemo(() => {\n    const dispatch = (action: Action | ((state: State) => Action)) => {\n      performTransaction(() => {\n        const payload =\n          typeof action === 'function' ? action(getState()) : action;\n\n        const handled = onAction(payload);\n\n        if (!handled && process.env.NODE_ENV !== 'production') {\n          console.error(\n            `The action '${payload.type}' with payload '${JSON.stringify(\n              payload.payload\n            )}' was not handled by any navigator. If you are trying to navigate to a screen, check if the screen exists in your navigator. If you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/en/nesting-navigators.html#navigating-to-a-screen-in-a-nested-navigator.`\n          );\n        }\n      });\n    };\n\n    const actions = {\n      ...router.actionCreators,\n      ...CommonActions,\n    };\n\n    const helpers = Object.keys(actions).reduce<Record<string, () => void>>(\n      (acc, name) => {\n        // @ts-ignore\n        acc[name] = (...args: any) => dispatch(actions[name](...args));\n        return acc;\n      },\n      {}\n    );\n\n    return {\n      ...parentNavigationHelpers,\n      ...helpers,\n      dispatch,\n      emit: emitter.emit,\n      isFocused: parentNavigationHelpers\n        ? parentNavigationHelpers.isFocused\n        : () => true,\n      canGoBack: () => {\n        const state = getState();\n\n        return (\n          router.getStateForAction(state, CommonActions.goBack() as Action, {\n            routeNames: state.routeNames,\n            routeParamList: {},\n          }) !== null ||\n          parentNavigationHelpers?.canGoBack() ||\n          false\n        );\n      },\n    } as NavigationHelpers<ParamListBase, EventMap> &\n      (NavigationProp<ParamListBase, string, any, any, any> | undefined);\n  }, [\n    router,\n    getState,\n    parentNavigationHelpers,\n    emitter.emit,\n    performTransaction,\n    onAction,\n  ]);\n}\n"]}