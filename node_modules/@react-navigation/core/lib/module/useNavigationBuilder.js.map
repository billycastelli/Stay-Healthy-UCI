{"version":3,"sources":["useNavigationBuilder.tsx"],"names":["React","isValidElementType","CommonActions","NavigationStateContext","NavigationRouteContext","Screen","useEventEmitter","useRegisterNavigator","useDescriptors","useNavigationHelpers","useOnAction","useFocusEvents","useOnRouteFocus","useChildActionListeners","useFocusedListeners","useFocusedListenersChildrenAdapter","PrivateValueStore","useStateGetters","useOnGetState","isArrayEqual","a","b","length","every","it","index","getRouteConfigsFromChildren","children","configs","Children","toArray","reduce","acc","child","isValidElement","type","push","props","Fragment","Error","name","String","process","env","NODE_ENV","forEach","config","component","JSON","stringify","undefined","console","warn","useNavigationBuilder","createRouter","options","navigatorKey","route","useContext","previousRouteRef","useRef","useEffect","current","rest","router","params","screen","initialRouteName","screens","curr","routeNames","Object","keys","routeParamList","initialParams","initialParamsFromParams","isStateValid","useCallback","state","isStateInitialized","stale","currentState","getState","getCurrentState","setState","setKey","getKey","performTransaction","previousStateRef","initializedStateRef","getInitialState","getRehydratedState","nextState","getStateForRouteNamesChange","updatedState","getStateForAction","navigate","emitter","emit","data","listeners","actionListeners","addListener","addActionListener","focusedListeners","addFocusedListener","getStateForRoute","addStateGetter","onAction","key","routerConfigOptions","onRouteFocus","navigation","descriptors","screenOptions"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { isValidElementType } from 'react-is';\nimport {\n  CommonActions,\n  DefaultRouterOptions,\n  NavigationState,\n  ParamListBase,\n  Router,\n  RouterFactory,\n  PartialState,\n  NavigationAction,\n} from '@react-navigation/routers';\nimport { NavigationStateContext } from './BaseNavigationContainer';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport Screen from './Screen';\nimport useEventEmitter from './useEventEmitter';\nimport useRegisterNavigator from './useRegisterNavigator';\nimport useDescriptors from './useDescriptors';\nimport useNavigationHelpers from './useNavigationHelpers';\nimport useOnAction from './useOnAction';\nimport useFocusEvents from './useFocusEvents';\nimport useOnRouteFocus from './useOnRouteFocus';\nimport useChildActionListeners from './useChildActionListeners';\nimport useFocusedListeners from './useFocusedListeners';\nimport useFocusedListenersChildrenAdapter from './useFocusedListenersChildrenAdapter';\nimport {\n  DefaultNavigatorOptions,\n  RouteConfig,\n  PrivateValueStore,\n} from './types';\nimport useStateGetters from './useStateGetters';\nimport useOnGetState from './useOnGetState';\n\n// This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\nPrivateValueStore;\n\ntype NavigatorRoute = {\n  key: string;\n  params?: {\n    screen?: string;\n    params?: object;\n  };\n};\n\n/**\n * Compare two arrays with primitive values as the content.\n * We need to make sure that both values and order match.\n */\nconst isArrayEqual = (a: any[], b: any[]) =>\n  a.length === b.length && a.every((it, index) => it === b[index]);\n\n/**\n * Extract route config object from React children elements.\n *\n * @param children React Elements to extract the config from.\n */\nconst getRouteConfigsFromChildren = <ScreenOptions extends object>(\n  children: React.ReactNode\n) => {\n  const configs = React.Children.toArray(children).reduce<\n    RouteConfig<ParamListBase, string, ScreenOptions>[]\n  >((acc, child) => {\n    if (React.isValidElement(child)) {\n      if (child.type === Screen) {\n        // We can only extract the config from `Screen` elements\n        // If something else was rendered, it's probably a bug\n        acc.push(\n          child.props as RouteConfig<ParamListBase, string, ScreenOptions>\n        );\n        return acc;\n      }\n\n      if (child.type === React.Fragment) {\n        // When we encounter a fragment, we need to dive into its children to extract the configs\n        // This is handy to conditionally define a group of screens\n        acc.push(\n          ...getRouteConfigsFromChildren<ScreenOptions>(child.props.children)\n        );\n        return acc;\n      }\n    }\n\n    throw new Error(\n      `A navigator can only contain 'Screen' components as its direct children (found '${\n        // @ts-ignore\n        child.type && child.type.name ? child.type.name : String(child)\n      }')`\n    );\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach(config => {\n      const { name, children, component } = config as any;\n\n      if (typeof name !== 'string' || !name) {\n        throw new Error(\n          `Got an invalid name (${JSON.stringify(\n            name\n          )}) for the screen. It must be a non-empty string.`\n        );\n      }\n\n      if (children != null || component !== undefined) {\n        if (children != null && component !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`\n          );\n        }\n\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(\n            `Got an invalid value for 'component' prop for the screen '${name}'. It must be a a valid React Component.`\n          );\n        }\n\n        if (typeof component === 'function' && component.name === 'component') {\n          // Inline anonymous functions passed in the `component` prop will have the name of the prop\n          // It's relatively safe to assume that it's not a component since it should also have PascalCase name\n          // We won't catch all scenarios here, but this should catch a good chunk of incorrect use.\n          console.warn(\n            `Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`\n          );\n        }\n      } else {\n        throw new Error(\n          `Couldn't find a 'component' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`\n        );\n      }\n    });\n  }\n\n  return configs;\n};\n\n/**\n * Hook for building navigators.\n *\n * @param createRouter Factory method which returns router object.\n * @param options Options object containing `children` and additional options for the router.\n * @returns An object containing `state`, `navigation`, `descriptors` objects.\n */\nexport default function useNavigationBuilder<\n  State extends NavigationState,\n  RouterOptions extends DefaultRouterOptions,\n  ScreenOptions extends object,\n  EventMap extends Record<string, any>\n>(\n  createRouter: RouterFactory<State, any, RouterOptions>,\n  options: DefaultNavigatorOptions<ScreenOptions> & RouterOptions\n) {\n  const navigatorKey = useRegisterNavigator();\n\n  const route = React.useContext(NavigationRouteContext) as\n    | NavigatorRoute\n    | undefined;\n\n  const previousRouteRef = React.useRef(route);\n\n  React.useEffect(() => {\n    previousRouteRef.current = route;\n  }, [route]);\n\n  const { children, ...rest } = options;\n  const { current: router } = React.useRef<Router<State, any>>(\n    createRouter({\n      ...((rest as unknown) as RouterOptions),\n      ...(route?.params && typeof route.params.screen === 'string'\n        ? { initialRouteName: route.params.screen }\n        : null),\n    })\n  );\n\n  const screens = getRouteConfigsFromChildren<ScreenOptions>(children).reduce<\n    Record<string, RouteConfig<ParamListBase, string, ScreenOptions>>\n  >((acc, curr) => {\n    if (curr.name in acc) {\n      throw new Error(\n        `A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${curr.name}')`\n      );\n    }\n\n    acc[curr.name] = curr;\n    return acc;\n  }, {});\n\n  const routeNames = Object.keys(screens);\n  const routeParamList = routeNames.reduce<Record<string, object | undefined>>(\n    (acc, curr) => {\n      const { initialParams } = screens[curr];\n      const initialParamsFromParams =\n        route?.params && route.params.screen === curr\n          ? route.params.params\n          : undefined;\n\n      acc[curr] =\n        initialParams !== undefined || initialParamsFromParams !== undefined\n          ? {\n              ...initialParams,\n              ...initialParamsFromParams,\n            }\n          : undefined;\n\n      return acc;\n    },\n    {}\n  );\n\n  if (!routeNames.length) {\n    throw new Error(\n      \"Couldn't find any screens for the navigator. Have you defined any screens as its children?\"\n    );\n  }\n\n  const isStateValid = React.useCallback(\n    state => state.type === undefined || state.type === router.type,\n    [router.type]\n  );\n\n  const isStateInitialized = React.useCallback(\n    state =>\n      state !== undefined && state.stale === false && isStateValid(state),\n    [isStateValid]\n  );\n\n  const {\n    state: currentState,\n    getState: getCurrentState,\n    setState,\n    setKey,\n    getKey,\n    performTransaction,\n  } = React.useContext(NavigationStateContext);\n\n  const previousStateRef = React.useRef<\n    NavigationState | PartialState<NavigationState> | undefined\n  >();\n  const initializedStateRef = React.useRef<State>();\n\n  if (\n    initializedStateRef.current === undefined ||\n    currentState !== previousStateRef.current\n  ) {\n    // If the current state isn't initialized on first render, we initialize it\n    // We also need to re-initialize it if the state passed from parent was changed (maybe due to reset)\n    // Otherwise assume that the state was provided as initial state\n    // So we need to rehydrate it to make it usable\n    initializedStateRef.current =\n      currentState === undefined || !isStateValid(currentState)\n        ? router.getInitialState({\n            routeNames,\n            routeParamList,\n          })\n        : router.getRehydratedState(currentState as PartialState<State>, {\n            routeNames,\n            routeParamList,\n          });\n  }\n\n  React.useEffect(() => {\n    previousStateRef.current = currentState;\n  }, [currentState]);\n\n  let state =\n    // If the state isn't initialized, or stale, use the state we initialized instead\n    // The state won't update until there's a change needed in the state we have initalized locally\n    // So it'll be `undefined` or stale untill the first navigation event happens\n    isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedStateRef.current as State);\n\n  let nextState: State = state;\n\n  if (!isArrayEqual(state.routeNames, routeNames)) {\n    // When the list of route names change, the router should handle it to remove invalid routes\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList,\n    });\n  }\n\n  if (\n    previousRouteRef.current &&\n    route &&\n    route.params &&\n    typeof route.params.screen === 'string' &&\n    route.params !== previousRouteRef.current.params\n  ) {\n    // If the route was updated with new name and/or params, we should navigate there\n    // The update should be limited to current navigator only, so we call the router manually\n    const updatedState = router.getStateForAction(\n      state,\n      CommonActions.navigate(route.params.screen, route.params.params),\n      {\n        routeNames,\n        routeParamList,\n      }\n    );\n\n    nextState =\n      updatedState !== null\n        ? router.getRehydratedState(updatedState, {\n            routeNames,\n            routeParamList,\n          })\n        : state;\n  }\n\n  if (state !== nextState) {\n    // If the state needs to be updated, we'll schedule an update with React\n    // setState in render seems hacky, but that's how React docs implement getDerivedPropsFromState\n    // https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-getderivedstatefromprops\n    performTransaction(() => {\n      setState(nextState);\n    });\n  }\n\n  // The up-to-date state will come in next render, but we don't need to wait for it\n  // We can't use the outdated state since the screens have changed, which will cause error due to mismatched config\n  // So we override the state objec we return to use the latest state as soon as possible\n  state = nextState;\n\n  React.useEffect(() => {\n    setKey(navigatorKey);\n\n    return () => {\n      // We need to clean up state for this navigator on unmount\n      performTransaction(() => {\n        if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n          setState(undefined);\n        }\n      });\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const getState = React.useCallback((): State => {\n    const currentState = getCurrentState();\n\n    return isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedStateRef.current as State);\n  }, [getCurrentState, isStateInitialized]);\n\n  const emitter = useEventEmitter();\n\n  useFocusEvents({ state, emitter });\n\n  React.useEffect(() => {\n    emitter.emit({ type: 'state', data: { state } });\n  }, [emitter, state]);\n\n  const {\n    listeners: actionListeners,\n    addListener: addActionListener,\n  } = useChildActionListeners();\n\n  const {\n    listeners: focusedListeners,\n    addListener: addFocusedListener,\n  } = useFocusedListeners();\n\n  const { getStateForRoute, addStateGetter } = useStateGetters();\n\n  const onAction = useOnAction({\n    router,\n    getState,\n    setState,\n    key: route?.key,\n    listeners: actionListeners,\n    routerConfigOptions: {\n      routeNames,\n      routeParamList,\n    },\n  });\n\n  const onRouteFocus = useOnRouteFocus({\n    router,\n    key: route?.key,\n    getState,\n    setState,\n  });\n\n  const navigation = useNavigationHelpers<State, NavigationAction, EventMap>({\n    onAction,\n    getState,\n    emitter,\n    router,\n  });\n\n  useFocusedListenersChildrenAdapter({\n    navigation,\n    focusedListeners,\n  });\n\n  useOnGetState({\n    getState,\n    getStateForRoute,\n  });\n\n  const descriptors = useDescriptors<State, ScreenOptions>({\n    state,\n    screens,\n    navigation,\n    screenOptions: options.screenOptions,\n    onAction,\n    getState,\n    setState,\n    onRouteFocus,\n    addActionListener,\n    addFocusedListener,\n    addStateGetter,\n    router,\n    emitter,\n  });\n\n  return {\n    state,\n    navigation,\n    descriptors,\n  };\n}\n"]}