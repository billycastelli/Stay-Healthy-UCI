{"version":3,"sources":["useFocusEvents.tsx"],"names":["React","NavigationContext","useFocusEvents","state","emitter","navigation","useContext","lastFocusedKeyRef","useRef","currentFocusedKey","routes","index","key","useEffect","addListener","emit","type","target","lastFocusedKey","current","undefined","isFocused"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAEA,OAAOC,iBAAP,MAA8B,qBAA9B;;AAQA;;;AAGA,eAAe,SAASC,cAAT,OAAqD;AAAA,MAA7B;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAA6B;AAClE,QAAMC,UAAU,GAAGL,KAAK,CAACM,UAAN,CAAiBL,iBAAjB,CAAnB;AACA,QAAMM,iBAAiB,GAAGP,KAAK,CAACQ,MAAN,EAA1B;AAEA,QAAMC,iBAAiB,GAAGN,KAAK,CAACO,MAAN,CAAaP,KAAK,CAACQ,KAAnB,EAA0BC,GAApD,CAJkE,CAMlE;AACA;;AACAZ,EAAAA,KAAK,CAACa,SAAN,CACE,MACER,UADF,aACEA,UADF,uBACEA,UAAU,CAAES,WAAZ,CAAwB,OAAxB,EAAiC,MAC/BV,OAAO,CAACW,IAAR,CAAa;AAAEC,IAAAA,IAAI,EAAE,OAAR;AAAiBC,IAAAA,MAAM,EAAER;AAAzB,GAAb,CADF,CAFJ,EAKE,CAACA,iBAAD,EAAoBL,OAApB,EAA6BC,UAA7B,CALF;AAQAL,EAAAA,KAAK,CAACa,SAAN,CACE,MACER,UADF,aACEA,UADF,uBACEA,UAAU,CAAES,WAAZ,CAAwB,MAAxB,EAAgC,MAC9BV,OAAO,CAACW,IAAR,CAAa;AAAEC,IAAAA,IAAI,EAAE,MAAR;AAAgBC,IAAAA,MAAM,EAAER;AAAxB,GAAb,CADF,CAFJ,EAKE,CAACA,iBAAD,EAAoBL,OAApB,EAA6BC,UAA7B,CALF;AAQAL,EAAAA,KAAK,CAACa,SAAN,CAAgB,MAAM;AACpB,UAAMK,cAAc,GAAGX,iBAAiB,CAACY,OAAzC;AAEAZ,IAAAA,iBAAiB,CAACY,OAAlB,GAA4BV,iBAA5B,CAHoB,CAKpB;AACA;;AACA,QAAIS,cAAc,KAAKE,SAAnB,IAAgC,CAACf,UAArC,EAAiD;AAC/CD,MAAAA,OAAO,CAACW,IAAR,CAAa;AAAEC,QAAAA,IAAI,EAAE,OAAR;AAAiBC,QAAAA,MAAM,EAAER;AAAzB,OAAb;AACD,KATmB,CAWpB;AACA;;;AACA,QACES,cAAc,KAAKT,iBAAnB,IACA,EAAEJ,UAAU,GAAGA,UAAU,CAACgB,SAAX,EAAH,GAA4B,IAAxC,CAFF,EAGE;AACA;AACD;;AAED,QAAIH,cAAc,KAAKE,SAAvB,EAAkC;AAChC;AACA;AACD;;AAEDhB,IAAAA,OAAO,CAACW,IAAR,CAAa;AACXC,MAAAA,IAAI,EAAE,OADK;AAEXC,MAAAA,MAAM,EAAER;AAFG,KAAb;AAKAL,IAAAA,OAAO,CAACW,IAAR,CAAa;AACXC,MAAAA,IAAI,EAAE,MADK;AAEXC,MAAAA,MAAM,EAAEC;AAFG,KAAb;AAID,GAlCD,EAkCG,CAACT,iBAAD,EAAoBL,OAApB,EAA6BC,UAA7B,CAlCH;AAmCD","sourcesContent":["import * as React from 'react';\nimport { NavigationState } from '@react-navigation/routers';\nimport NavigationContext from './NavigationContext';\nimport { NavigationEventEmitter } from './useEventEmitter';\n\ntype Options = {\n  state: NavigationState;\n  emitter: NavigationEventEmitter;\n};\n\n/**\n * Hook to take care of emitting `focus` and `blur` events.\n */\nexport default function useFocusEvents({ state, emitter }: Options) {\n  const navigation = React.useContext(NavigationContext);\n  const lastFocusedKeyRef = React.useRef<string | undefined>();\n\n  const currentFocusedKey = state.routes[state.index].key;\n\n  // When the parent screen changes its focus state, we also need to change child's focus\n  // Coz the child screen can't be focused if the parent screen is out of focus\n  React.useEffect(\n    () =>\n      navigation?.addListener('focus', () =>\n        emitter.emit({ type: 'focus', target: currentFocusedKey })\n      ),\n    [currentFocusedKey, emitter, navigation]\n  );\n\n  React.useEffect(\n    () =>\n      navigation?.addListener('blur', () =>\n        emitter.emit({ type: 'blur', target: currentFocusedKey })\n      ),\n    [currentFocusedKey, emitter, navigation]\n  );\n\n  React.useEffect(() => {\n    const lastFocusedKey = lastFocusedKeyRef.current;\n\n    lastFocusedKeyRef.current = currentFocusedKey;\n\n    // We wouldn't have `lastFocusedKey` on initial mount\n    // Fire focus event for the current route on mount if there's no parent navigator\n    if (lastFocusedKey === undefined && !navigation) {\n      emitter.emit({ type: 'focus', target: currentFocusedKey });\n    }\n\n    // We should only dispatch events when the focused key changed and navigator is focused\n    // When navigator is not focused, screens inside shouldn't receive focused status either\n    if (\n      lastFocusedKey === currentFocusedKey ||\n      !(navigation ? navigation.isFocused() : true)\n    ) {\n      return;\n    }\n\n    if (lastFocusedKey === undefined) {\n      // Only fire events after initial mount\n      return;\n    }\n\n    emitter.emit({\n      type: 'focus',\n      target: currentFocusedKey,\n    });\n\n    emitter.emit({\n      type: 'blur',\n      target: lastFocusedKey,\n    });\n  }, [currentFocusedKey, emitter, navigation]);\n}\n"]}