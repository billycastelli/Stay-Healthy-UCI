{"version":3,"sources":["DrawerRouter.tsx"],"names":["shortid","TabRouter","TabActions","DrawerActions","openDrawer","type","closeDrawer","toggleDrawer","isDrawerOpen","state","Boolean","history","find","it","filter","DrawerRouter","options","router","getInitialState","routeNames","routeParamList","stale","key","getRehydratedState","partialState","getStateForRouteFocus","result","getStateForAction","action","actionCreators"],"mappings":"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","sourcesContent":["import shortid from 'shortid';\nimport { PartialState, CommonNavigationAction, Router } from './types';\nimport TabRouter, {\n  TabActions,\n  TabActionType,\n  TabRouterOptions,\n  TabNavigationState,\n} from './TabRouter';\n\nexport type DrawerActionType =\n  | TabActionType\n  | {\n      type: 'OPEN_DRAWER' | 'CLOSE_DRAWER' | 'TOGGLE_DRAWER';\n      source?: string;\n      target?: string;\n    };\n\nexport type DrawerRouterOptions = TabRouterOptions;\n\nexport type DrawerNavigationState = Omit<\n  TabNavigationState,\n  'type' | 'history'\n> & {\n  /**\n   * Type of the router, in this case, it's drawer.\n   */\n  type: 'drawer';\n  /**\n   * List of previously visited route keys and drawer open status.\n   */\n  history: ({ type: 'route'; key: string } | { type: 'drawer' })[];\n};\n\nexport const DrawerActions = {\n  ...TabActions,\n  openDrawer(): DrawerActionType {\n    return { type: 'OPEN_DRAWER' };\n  },\n  closeDrawer(): DrawerActionType {\n    return { type: 'CLOSE_DRAWER' };\n  },\n  toggleDrawer(): DrawerActionType {\n    return { type: 'TOGGLE_DRAWER' };\n  },\n};\n\nconst isDrawerOpen = (\n  state: DrawerNavigationState | PartialState<DrawerNavigationState>\n) => Boolean(state.history?.find(it => it.type === 'drawer'));\n\nconst openDrawer = (state: DrawerNavigationState): DrawerNavigationState => {\n  if (isDrawerOpen(state)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    history: [...state.history, { type: 'drawer' }],\n  };\n};\n\nconst closeDrawer = (state: DrawerNavigationState): DrawerNavigationState => {\n  if (!isDrawerOpen(state)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    history: state.history.filter(it => it.type !== 'drawer'),\n  };\n};\n\nexport default function DrawerRouter(\n  options: DrawerRouterOptions\n): Router<DrawerNavigationState, DrawerActionType | CommonNavigationAction> {\n  const router = (TabRouter(options) as unknown) as Router<\n    DrawerNavigationState,\n    TabActionType | CommonNavigationAction\n  >;\n\n  return {\n    ...router,\n\n    type: 'drawer',\n\n    getInitialState({ routeNames, routeParamList }) {\n      const state = router.getInitialState({ routeNames, routeParamList });\n\n      return {\n        ...state,\n        stale: false,\n        type: 'drawer',\n        key: `drawer-${shortid()}`,\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      let state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList,\n      });\n\n      if (isDrawerOpen(partialState)) {\n        state = openDrawer(state);\n      }\n\n      return {\n        ...state,\n        type: 'drawer',\n        key: `drawer-${shortid()}`,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n\n      return closeDrawer(result);\n    },\n\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerOpen(state)) {\n            return closeDrawer(state);\n          }\n\n          return openDrawer(state);\n\n        case 'GO_BACK':\n          if (isDrawerOpen(state)) {\n            return closeDrawer(state);\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n\n    actionCreators: DrawerActions,\n  };\n}\n"]}