{"version":3,"sources":["TabRouter.tsx"],"names":["TYPE_ROUTE","TabActions","jumpTo","name","params","type","payload","getRouteHistory","routes","index","backBehavior","history","key","unshift","i","changeIndex","state","currentKey","filter","it","concat","TabRouter","initialRouteName","router","BaseRouter","getInitialState","routeNames","routeParamList","undefined","includes","indexOf","map","stale","getRehydratedState","partialState","route","find","r","Math","min","max","length","getStateForRouteNamesChange","getStateForRouteFocus","findIndex","getStateForAction","action","previousKey","slice","shouldActionChangeFocus","actionCreators"],"mappings":"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","sourcesContent":["import shortid from 'shortid';\nimport BaseRouter from './BaseRouter';\nimport {\n  NavigationState,\n  PartialState,\n  CommonNavigationAction,\n  Router,\n  DefaultRouterOptions,\n  Route,\n} from './types';\n\nexport type TabActionType = {\n  type: 'JUMP_TO';\n  payload: { name: string; params?: object };\n  source?: string;\n  target?: string;\n};\n\nexport type BackBehavior = 'initialRoute' | 'order' | 'history' | 'none';\n\nexport type TabRouterOptions = DefaultRouterOptions & {\n  backBehavior?: BackBehavior;\n};\n\nexport type TabNavigationState = Omit<NavigationState, 'history'> & {\n  /**\n   * Type of the router, in this case, it's tab.\n   */\n  type: 'tab';\n  /**\n   * List of previously visited route keys.\n   */\n  history: { type: 'route'; key: string }[];\n};\n\nconst TYPE_ROUTE = 'route' as const;\n\nexport const TabActions = {\n  jumpTo(name: string, params?: object): TabActionType {\n    return { type: 'JUMP_TO', payload: { name, params } };\n  },\n};\n\nconst getRouteHistory = (\n  routes: Route<string>[],\n  index: number,\n  backBehavior: BackBehavior\n) => {\n  const history = [{ type: TYPE_ROUTE, key: routes[index].key }];\n\n  switch (backBehavior) {\n    case 'initialRoute':\n      if (index !== 0) {\n        history.unshift({ type: TYPE_ROUTE, key: routes[0].key });\n      }\n      break;\n    case 'order':\n      for (let i = index; i > 0; i--) {\n        history.unshift({ type: TYPE_ROUTE, key: routes[i - 1].key });\n      }\n      break;\n    case 'history':\n      // The history will fill up on navigation\n      break;\n  }\n\n  return history;\n};\n\nconst changeIndex = (\n  state: TabNavigationState,\n  index: number,\n  backBehavior: BackBehavior\n) => {\n  let history;\n\n  if (backBehavior === 'history') {\n    const currentKey = state.routes[index].key;\n\n    history = state.history\n      .filter(it => (it.type === 'route' ? it.key !== currentKey : false))\n      .concat({ type: TYPE_ROUTE, key: currentKey });\n  } else {\n    history = getRouteHistory(state.routes, index, backBehavior);\n  }\n\n  return {\n    ...state,\n    index,\n    history,\n  };\n};\n\nexport default function TabRouter({\n  initialRouteName,\n  backBehavior = 'history',\n}: TabRouterOptions) {\n  const router: Router<\n    TabNavigationState,\n    TabActionType | CommonNavigationAction\n  > = {\n    ...BaseRouter,\n\n    type: 'tab',\n\n    getInitialState({ routeNames, routeParamList }) {\n      const index =\n        initialRouteName !== undefined && routeNames.includes(initialRouteName)\n          ? routeNames.indexOf(initialRouteName)\n          : 0;\n\n      const routes = routeNames.map(name => ({\n        name,\n        key: `${name}-${shortid()}`,\n        params: routeParamList[name],\n      }));\n\n      const history = getRouteHistory(routes, index, backBehavior);\n\n      return {\n        stale: false,\n        type: 'tab',\n        key: `tab-${shortid()}`,\n        index,\n        routeNames,\n        history,\n        routes,\n      };\n    },\n\n    getRehydratedState(partialState, { routeNames, routeParamList }) {\n      let state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = routeNames.map(name => {\n        const route = (state as PartialState<TabNavigationState>).routes.find(\n          r => r.name === name\n        );\n\n        return {\n          ...route,\n          name,\n          key:\n            route && route.name === name && route.key\n              ? route.key\n              : `${name}-${shortid()}`,\n          params:\n            routeParamList[name] !== undefined\n              ? {\n                  ...routeParamList[name],\n                  ...(route ? route.params : undefined),\n                }\n              : route\n              ? route.params\n              : undefined,\n        } as Route<string>;\n      });\n\n      const index = Math.min(\n        Math.max(\n          typeof state.index === 'number'\n            ? state.index\n            : routeNames.indexOf(state.routes[0].name),\n          0\n        ),\n        routes.length - 1\n      );\n\n      let history = state.history?.filter(it =>\n        routes.find(r => r.key === it.key)\n      );\n\n      if (!history?.length) {\n        history = getRouteHistory(routes, index, backBehavior);\n      }\n\n      return {\n        stale: false,\n        type: 'tab',\n        key: `tab-${shortid()}`,\n        index,\n        routeNames,\n        history,\n        routes,\n      };\n    },\n\n    getStateForRouteNamesChange(state, { routeNames, routeParamList }) {\n      const routes = routeNames.map(\n        name =>\n          state.routes.find(r => r.name === name) || {\n            name,\n            key: `${name}-${shortid()}`,\n            params: routeParamList[name],\n          }\n      );\n\n      const index = Math.max(\n        0,\n        routeNames.indexOf(state.routes[state.index].name)\n      );\n\n      let history = state.history.filter(it =>\n        routes.find(r => r.key === it.key)\n      );\n\n      if (!history.length) {\n        history = getRouteHistory(routes, index, backBehavior);\n      }\n\n      return {\n        ...state,\n        history,\n        routeNames,\n        routes,\n        index,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex(r => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return changeIndex(state, index, backBehavior);\n    },\n\n    getStateForAction(state, action) {\n      switch (action.type) {\n        case 'JUMP_TO':\n        case 'NAVIGATE': {\n          let index = -1;\n\n          if (action.type === 'NAVIGATE' && action.payload.key) {\n            index = state.routes.findIndex(\n              route => route.key === action.payload.key\n            );\n          } else {\n            index = state.routes.findIndex(\n              route => route.name === action.payload.name\n            );\n          }\n\n          if (index === -1) {\n            return null;\n          }\n\n          return changeIndex(\n            {\n              ...state,\n              routes:\n                action.payload.params !== undefined\n                  ? state.routes.map((route, i) =>\n                      i === index\n                        ? {\n                            ...route,\n                            params: {\n                              ...route.params,\n                              ...action.payload.params,\n                            },\n                          }\n                        : route\n                    )\n                  : state.routes,\n            },\n            index,\n            backBehavior\n          );\n        }\n\n        case 'GO_BACK': {\n          if (state.history.length === 1) {\n            return null;\n          }\n\n          const previousKey = state.history[state.history.length - 2].key;\n          const index = state.routes.findIndex(\n            route => route.key === previousKey\n          );\n\n          if (index === -1) {\n            return null;\n          }\n\n          return {\n            ...state,\n            history: state.history.slice(0, -1),\n            index,\n          };\n        }\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    shouldActionChangeFocus(action) {\n      return action.type === 'NAVIGATE';\n    },\n\n    actionCreators: TabActions,\n  };\n\n  return router;\n}\n"]}